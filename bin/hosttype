#! /bin/sh
# hosttype --- guess host type (cpu-vendor-os)

# Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 03, 2004 Free Software Foundation, Inc.
# Copyright (C) 1991, 94, 95, 96, 97, 98, 99, 02, 03, 04, 05, 2008 Noah S. Friedman

# Maintainer: Noah Friedman <friedman@splode.com>
# Created: 1993-03-08

# $Id: hosttype,v 1.61 2010/10/23 07:08:35 friedman Exp $

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Commentary:

# Originally based on GNU `config.guess' script,
# but has probably forked significantly since 1995.
# Some resynchronization Aug 2005.

# Code:

trap 'exit 1' 1 2 15

# CC_FOR_BUILD -- compiler used by this script. Note that the use of a
# compiler to aid in system detection is discouraged as it requires
# temporary files to be created and, as you can see below, it is a
# headache to deal with in a portable fashion.

# Historically, `CC_FOR_BUILD' used to be named `HOST_CC'. We still
# use `HOST_CC' if defined, but it is deprecated.

# Portable tmp directory creation inspired by the Autoconf team.

set_cc_for_build='
trap "exitcode=\$?; (rm -f \$tmpfiles 2>/dev/null; rmdir \$tmp 2>/dev/null) && exit \$exitcode" 0 ;
trap "rm -f \$tmpfiles 2>/dev/null; rmdir \$tmp 2>/dev/null; exit 1" 1 2 13 15 ;
: ${TMPDIR=/tmp} ;
 { tmp=`(umask 077 && mktemp -d -q "$TMPDIR/cgXXXXXX") 2>/dev/null` && test -n "$tmp" && test -d "$tmp" ; } ||
 { test -n "$RANDOM" && tmp=$TMPDIR/cg$$-$RANDOM && (umask 077 && mkdir $tmp) ; } ||
 { tmp=$TMPDIR/cg-$$ && (umask 077 && mkdir $tmp) ; } ||
 { echo "$me: cannot create a temporary directory in $TMPDIR" >&2 ; exit 1 ; } ;
dummy=$tmp/dummy ;
tmpfiles="$dummy.c $dummy.o $dummy.s $dummy.rel $dummy" ;
case $CC_FOR_BUILD,$HOST_CC,$CC in
 ,,)    echo "int x;" > $dummy.c ;
	for c in cc gcc c89 c99 aCC xlc; do
	  if ($c -c -o $dummy.o $dummy.c) >/dev/null 2>&1 ; then
	     CC_FOR_BUILD="$c"; break ;
	  fi ;
	done ;
	if test x"$CC_FOR_BUILD" = x ; then
	  CC_FOR_BUILD=no_compiler_found ;
	fi
	;;
 ,,*)   CC_FOR_BUILD=$CC ;;
 ,*,*)  CC_FOR_BUILD=$HOST_CC ;;
esac ;'

sed_downcase='y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'

# This is needed to find uname on a Pyramid OSx when run in the BSD universe.
# (ghazi@noc.rutgers.edu 1994-08-24)
if test -f /.attbin/uname ; then
  PATH=$PATH:/.attbin
  export PATH
fi

# These are exported and inherited from the environment for cases
# where this script is called recursively.
UNAME_MACHINE=${UNAME_MACHINE-`(uname -m) 2>/dev/null`} || UNAME_MACHINE=unknown
UNAME_RELEASE=${UNAME_RELEASE-`(uname -r) 2>/dev/null`} || UNAME_RELEASE=unknown
UNAME_SYSTEM=${UNAME_SYSTEM-`(uname -s) 2>/dev/null`}   || UNAME_SYSTEM=unknown
UNAME_VERSION=${UNAME_VERSION-`(uname -v) 2>/dev/null`} || UNAME_VERSION=unknown
export UNAME_MACHINE UNAME_RELEASE UNAME_SYSTEM UNAME_VERSION

# Note: order is significant - the case branches are not exclusive.

case $UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION in
  *:Linux:*:*)
    OS=gnu
    if [ -f /etc/fedora-release ]; then
      ver=`sed -e 's/Fedora Core release //' \
               -e 's/Fedora release //' \
               -e 's/ (.*//' \
               -e q /etc/fedora-release`
      OS=fedora$ver
    elif [ -f /etc/mandrake-release ]; then
      ver=`sed -e 's/Mandrake .* release \([0-9.]*\)/\1/' \
               -e 's/ (.*//' \
               -e 's/\.//g' \
               -e 's/0$//g' \
               -e q /etc/mandrake-release`
      OS=mandrake$ver
    elif [ -f /etc/redhat-release ]; then
      # line 1: enterprise linux 3 and later
      # line 2: 6.x and later
      # line 3: 5.x and earlier
      ver=`sed -e 's/Red Hat Enterprise .* release \([0-9.]*\)/rhel\1/' \
               -e 's/Red Hat .* release \([0-9.]*\)/redhat\1/' \
               -e 's/^release \([0-9.]*\)/redhat\1/' \
               -e 's/ (.*//' \
               -e 's/\.//g' \
               -e 's/0$//g' \
               -e q /etc/redhat-release`
      OS=$ver
    elif [ -f /etc/lsb-release ]; then
      . /etc/lsb-release
      OS=`echo $DISTRIB_ID | tr '[A-Z]' '[a-z]'`$DISTRIB_RELEASE
    elif [ -f /etc/debian_version ]; then
      ver=`sed -e 's/\.//g' \
               -e 's/0$//g' \
               -e q /etc/debian_version`
      OS=debian$ver
    elif [ -f /etc/SuSE-release ]; then
      ver=`sed -e '/^VERSION/!d' \
               -e 's/.*= *//' \
               -e 's/\.//g' \
               -e 's/0$//g' \
               -e q /etc/SuSE-release`
      OS=suse$ver
    elif [ -f /etc/cobalt-release ]; then
      ver=`sed -e 's/^release \([0-9.]*\)/\1/' \
               -e 's/ (.*//' \
               -e 's/\.//g' \
               -e 's/0$//g' \
               -e q /etc/cobalt-release`
      OS=cobalt$ver
    fi

    # Canonicalize machine, vendor, object format, libc, etc.
    VENDOR=unknown
    LIBC=    # default is glibc2.x
    EXEFMT=  # default is elf
    case $UNAME_MACHINE in
      alpha )
        case `sed -n '/^cpu model/s/^.*: \(.*\)/\1/p' < /proc/cpuinfo` in
          EV5 )   UNAME_MACHINE=alphaev5   ;;
          EV56 )  UNAME_MACHINE=alphaev56  ;;
          PCA56 ) UNAME_MACHINE=alphapca56 ;;
          PCA57 ) UNAME_MACHINE=alphapca57 ;;
          EV6 )   UNAME_MACHINE=alphaev6   ;;
          EV67 )  UNAME_MACHINE=alphaev67  ;;
          EV68* ) UNAME_MACHINE=alphaev68  ;;
        esac
        if objdump --private-headers /bin/sh | grep ld.so.1 >/dev/null 2>&1
        then LIBC=libc1
        fi ;;
      armv*) : ;;
      arm* | sa110* ) UNAME_MACHINE=arm ;;
      cris ) VENDOR=axis ;;
      parisc64 ) UNAME_MACHINE=hppa64 ;;
      hppa | parisc )
        VENDOR=hp
        # Look for CPU level
        case `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in
          PA7*) UNAME_MACHINE=hppa1.1 ;;
          PA8*) UNAME_MACHINE=hppa2.0 ;;
          *)    UNAME_MACHINE=hppa    ;;
        esac ;;
      hppa64 | parisc64 ) VENDOR=hp UNAME_MACHINE=hppa64 ;;
      mips | mips64 )
        eval $set_cc_for_build
        sed 's/^[ 	]*//' <<EOF >$dummy.c
          #undef CPU
          #undef mips
          #undef mips64
          #undef mipsel
          #undef mipsel64
          #if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)
            CPU=${UNAME_MACHINE}el
          #else
            #if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)
              CPU=$UNAME_MACHINE
            #else
              CPU=
            #endif
          #endif
EOF
        eval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep ^CPU=`
        case $CPU in
          '' ) : ;;
          *  ) UNAME_MACHINE=$CPU ;;
        esac ;;

      s390 | s390x ) VENDOR=ibm ;;

      x86_64 | amd64 )
        VENDOR=pc
        UNAME_MACHINE=x86_64 ;;

      x86 | i?86 )
        VENDOR=pc
        UNAME_MACHINE=x86

        case ${HOSTTYPE_EXEFMT-unset} in
          unset ) : ;;
          * )
            # The BFD linker knows what the default object file format is,
            # so first see if it will tell us.  Chdir to the root directory
            # to prevent problems with other programs or directories called
            # `ld' in the path.
            # Set LC_ALL=C to ensure ld outputs messages in English.
            targets=`(cd /; LC_ALL=C ld --help) 2>&1 \
                      | sed -n \
                            -e '/supported targets:/!d' \
                            -e 's/.*supported targets: *\([^ ]*\).*/\1/p'`
            case $targets in
              elf32-i386 )       EXEFMT=      ;;
              a.out-i386-linux ) EXEFMT=aout  ;;
              coff-i386 )        EXEFMT=coff  ;;
              ''        )        EXEFMT=oldld ;;
            esac ;;
        esac

        case ${HOSTTYPE_LIBC-unset} in
          unset ) : ;;
          * )
            eval $set_cc_for_build
            sed -e 's/^[ 	]*//' <<EOF >$dummy.c
              #include <features.h>
              #ifdef __ELF__
                #ifdef __GLIBC__
                  #if __GLIBC__ >= 2
                    LIBC=
                  #else
                    LIBC=libc1
                  #endif
                #else
                  LIBC=libc1
                #endif
              #else
                #ifdef __INTEL_COMPILER
                  LIBC=
                #else
                  LIBC=aout
                #endif
              #endif
              #ifdef __dietlibc__
                LIBC=dietlibc
              #endif
EOF
            eval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep ^LIBC=` ;;
        esac
    esac

    echo ${UNAME_MACHINE}-${VENDOR}-linux${EXEFMT}-${OS}${LIBC}
    exit 0 ;;

  *:FreeBSD:*:*)
    vendor=unknown
    case $UNAME_MACHINE in
      i*86 )  UNAME_MACHINE=x86    vendor=pc ;;
      amd64 ) UNAME_MACHINE=x86_64 vendor=pc ;;
    esac

    ver=`echo $UNAME_RELEASE | sed -e 's/[-_(].*//'`
    echo ${UNAME_MACHINE}-${vendor}-freebsd$ver
    exit 0 ;;

  *:NetBSD:*:*)
    PATH=/sbin:/usr/sbin:$PATH
    MACHINE_ARCH=`(sysctl -n hw.machine_arch || echo unknown) 2> /dev/null`
    case $MACHINE_ARCH in
      armeb ) machine=armeb         ;;
      arm* )  machine=arm           ;;
      sh3el ) machine=shl           ;;
      sh3eb ) machine=sh            ;;
      i?86  ) machine=x86           ;;
      *)      machine=$MACHINE_ARCH ;;
    esac

    vendor=unknown
    case $UNAME_MACHINE in
      amd64 )        vendor=pc    ;;
      amiga )        vendor=cbm   ;;
      atari* )       vendor=atari ;;
      hp3[0-9][05] ) vendor=hp    ;;
      i?86 )         vendor=pc    ;;
      mac68k )       vendor=apple ;;
      macppc )       vendor=apple ;;
      sun3* )        vendor=sun   ;;
      x86_64 )       vendor=pc    ;;
    esac

    os=netbsd

    # The OS release
    # Debian GNU/NetBSD machines have a different userland, and thus, need
    # a distinct triplet. However, they do not need kernel version
    # information, so it can be replaced with a suitable tag, in the style
    # of linux-gnu.
    case $UNAME_VERSION in
      Debian*) release='-gnu' ;;
      *)       release=`echo $UNAME_RELEASE | sed -e 's/[-_].*/\./'` ;;
    esac

    # Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:
    # contains redundant information, the shorter form:
    # CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.
    echo $machine-$vendor-$os$release
    exit 0 ;;

  *:OpenBSD:*:*)
    vendor=unknown
    case $UNAME_MACHINE in
      i*86  )   vendor=pc
                UNAME_MACHINE=x86      ;;
      x86_64 )  vendor=pc              ;;
      amd64 )   vendor=pc
                UNAME_MACHINE=x86_64   ;;
      amiga )   vendor=cbm
                UNAME_MACHINE=m68k     ;;
      arc )     UNAME_MACHINE=mipsel   ;;
      arc64 )   UNAME_MACHINE=mips64el ;;
      atari )   vendor=atari
                UNAME_MACHINE=m68k     ;;
      cats )    UNAME_MACHINE=arm      ;;
      hp300 )   vendor=hp
                UNAME_MACHINE=m68k     ;;
      hppa* )   vendor=hp              ;;
      mac68k )  vendor=apple
                UNAME_MACHINE=m68k     ;;
      macppc )  vendor=apple
                UNAME_MACHINE=powerpc  ;;
      hkmips )  UNAME_MACHINE=mips     ;;
      mvme68k ) UNAME_MACHINE=m68k     ;;
      mvme88k ) UNAME_MACHINE=m88k     ;;
      mvmeppc ) UNAME_MACHINE=powerpc  ;;
      pegasos ) UNAME_MACHINE=powerpc  ;;
      pmax )    UNAME_MACHINE=mipsel   ;;
      sgi )     vendor=sgi
                UNAME_MACHINE=mipseb   ;;
      sun3 )    vendor=sun
                UNAME_MACHINE=m68k     ;;
      wgrisc )  UNAME_MACHINE=mipsel   ;;
    esac
    rel=`echo $UNAME_RELEASE | sed -e 's/[-_(].*/\./'`
    echo ${UNAME_MACHINE}-${vendor}-openbsd$rel
    exit 0 ;;
  *:ekkoBSD:*:*)
    echo ${UNAME_MACHINE}-unknown-ekkobsd${UNAME_RELEASE}
    exit 0 ;;
  *:MirBSD:*:*)
    case $UNAME_MACHINE in
      macppc ) UNAME_MACHINE=powerpc ;;
    esac
    echo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}
    exit 0 ;;
  *:Lites*:*:*)
    vendor=unknown
    case $UNAME_MACHINE in
      parisc* ) vendor=hp
                UNAME_MACHINE=hppa1.1 ;;
    esac
    echo ${UNAME_MACHINE}-${vendor}-lites
    exit 0 ;;
  *:Darwin:*:*)
    case `uname -p` in
      *86 )     UNAME_PROCESSOR=x86     ;;
      powerpc ) UNAME_PROCESSOR=powerpc ;;
    esac
    echo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}
    exit 0 ;;
  alpha:OSF1:*:*)
    if test $UNAME_RELEASE = "V4.0"; then
      UNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`
    fi
    psrinfo=/usr/sbin/psrinfo
    if test -f $psrinfo ; then
      # According to Compaq, /usr/sbin/psrinfo has been available on OSF/1
      # and Tru64 systems produced since 1995.  I hope that covers most
      # systems running today.  This command only detects the type of CPU 0.
      ALPHA_CPU_TYPE=`$psrinfo -v \
                       | sed -n -e '/^.*he alpha \(.*\) proc.*/{s//\1/p;q;}'`
      case $ALPHA_CPU_TYPE in
        "EV4 (21064)" )          UNAME_MACHINE=alpha      ;;
        "EV4.5 (21064)" )        UNAME_MACHINE=alpha      ;;
        "LCA4 (21066/21068)" )   UNAME_MACHINE=alpha      ;;
        "EV5 (21164)" )          UNAME_MACHINE=alphaev5   ;;
        "EV5.6 (21164A)" )       UNAME_MACHINE=alphaev56  ;;
        "EV5.6 (21164PC)" )      UNAME_MACHINE=alphapca56 ;;
        "EV5.7 (21164PC)" )      UNAME_MACHINE=alphapca57 ;;
        "EV6 (21264)" )          UNAME_MACHINE=alphaev6   ;;
        "EV6.7 (21264A)" )       UNAME_MACHINE=alphaev67  ;;
        "EV6.8CB (21264C)" )     UNAME_MACHINE=alphaev68  ;;
        "EV6.8AL (21264B)" )     UNAME_MACHINE=alphaev68  ;;
        "EV6.8CX (21264D)" )     UNAME_MACHINE=alphaev68  ;;
        "EV6.9A (21264/EV69A)" ) UNAME_MACHINE=alphaev69  ;;
        "EV7 (21364)" )          UNAME_MACHINE=alphaev7   ;;
        "EV7.9 (21364A)" )       UNAME_MACHINE=alphaev79  ;;
      esac
    else
      # Really old system.
      sed -e '/%%%/s/^[ 	]*%%%//' <<EOF >$dummy.s
          .globl main
          .ent main
          %%%main:
          .frame \$30,0,\$26,0
          .prologue 0
          .long 0x47e03d80 # implver $0
          lda \$2,259
          .long 0x47e20c21 # amask $2,$1
          srl \$1,8,\$2
          sll \$2,2,\$2
          sll \$0,3,\$0
          addl \$1,\$0,\$0
          addl \$2,\$0,\$0
          ret \$31,(\$26),1
          .end main
EOF
      eval $cc_for_build
      $CC_FOR_BUILD $dummy.s -o $dummy 2>/dev/null
      if test "$?" = 0 ; then
        $dummy
        result=$?
        case $result in
           7) UNAME_MACHINE=alpha      ;;
          10) UNAME_MACHINE=alphapca56 ;;
          14) UNAME_MACHINE=alphaev56  ;;
          15) UNAME_MACHINE=alphaev5   ;;
          16) UNAME_MACHINE=alphaev6   ;;
        esac
      fi
    fi

    # A Vn.n version is a released version.
    # A Tn.n version is a released field test version.
    # A Xn.n version is an unreleased experimental baselevel.
    # 1.2 uses "1.2" for uname -r.
    echo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} \
     | sed -e 's/^[VTX]//' \
           -e "$sed_downcase"`
    exit 0 ;;
  Alpha*:OpenVMS:*:*)
    echo alpha-hp-vms
    exit 0 ;;
  Alpha\ *:Windows_NT*:*)
    # How do we know it's Interix rather than the generic POSIX subsystem?
    # Should we change UNAME_MACHINE based on the output of uname instead
    # of the specific Alpha model?
    echo alpha-pc-interix
    exit 0 ;;
  21064:Windows_NT:50:3)
    echo alpha-dec-winnt3.5
    exit 0 ;;
  Amiga*:UNIX_System_V:4.0:*)
    echo m68k-cbm-sysv4
    exit 0;;
  *:[Aa]miga[Oo][Ss]:*:*)
    echo ${UNAME_MACHINE}-unknown-amigaos
    exit 0 ;;
  *:[Mm]orph[Oo][Ss]:*:*)
    echo ${UNAME_MACHINE}-unknown-morphos
    exit 0 ;;
  *:OS/390:*:*)
    echo i370-ibm-openedition
    exit 0 ;;
  *:OS400:*:*)
    echo powerpc-ibm-os400
    exit 0 ;;
  arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)
    echo arm-acorn-riscix$UNAME_RELEASE
    exit 0 ;;
  SR2?01:HI-UX/MPP:*:* | SR8000:HI-UX/MPP:*:*)
    echo hppa1.1-hitachi-hiuxmpp
    exit 0 ;;
  Pyramid*:OSx*:*:* | MIS*:OSx*:*:* | MIS*:SMP_DC-OSx*:*:*)
    # akee@wpdis03.wpafb.af.mil (Earle F. Ake) contributed MIS and NILE.
    if test "`(/bin/universe) 2>/dev/null`" = att ; then
      echo pyramid-pyramid-sysv3
    else
      echo pyramid-pyramid-bsd
    fi
    exit 0 ;;
  NILE*:*:*:dcosx)
    echo pyramid-pyramid-svr4
    exit 0 ;;
  DRS?6000:unix:4.0:6*)
    echo sparc-icl-nx6
    exit 0 ;;
  DRS?6000:UNIX_SV:4.2*:7*)
    case `/usr/bin/uname -p` in
      sparc ) echo sparc-icl-nx7 && exit 0 ;;
    esac ;;
  i86pc:SunOS:5.*:*)
    case `isainfo -b` in
      32 ) UNAME_MACHINE=x86 ;;
      64 ) UNAME_MACHINE=x86_64 ;;
    esac
    echo $UNAME_MACHINE-pc-solaris2`echo $UNAME_RELEASE | sed -e 's/[^.]*//'`
    exit 0 ;;
  sun4H:SunOS:5.*:*)
    echo sparc-hal-solaris2`echo $UNAME_RELEASE | sed -e 's/[^.]*//'`
    exit 0 ;;
  sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)
    echo sparc-sun-solaris2`echo $UNAME_RELEASE | sed -e 's/[^.]*//'`
    exit 0 ;;
  sun4*:SunOS:*:*)
    case "`/usr/bin/arch -k`" in
      Series*|S4*) UNAME_RELEASE=`uname -v` ;;
    esac
    # Japanese Language versions have a version number like `4.1.3-JL'.
    echo sparc-sun-sunos`echo $UNAME_RELEASE | sed -e 's/-/_/'`
    exit 0 ;;
  sun3*:SunOS:*:*)
    echo m68k-sun-sunos$UNAME_RELEASE
    exit 0 ;;
  sun*:*:4.2BSD:*)
    UNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`
    test x"$UNAME_RELEASE" = x && UNAME_RELEASE=3
    case `/bin/arch` in
      sun3 ) echo m68k-sun-sunos$UNAME_RELEASE  ;;
      sun4 ) echo sparc-sun-sunos$UNAME_RELEASE ;;
    esac
    exit 0 ;;
  aushp:SunOS:*:*)
    echo sparc-auspex-sunos${UNAME_RELEASE}
    exit 0 ;;
  # The situation for MiNT is a little confusing.  The machine name
  # can be virtually everything (everything which is not
  # "atarist" or "atariste" at least should have a processor
  # > m68000).  The system name ranges from "MiNT" over "FreeMiNT"
  # to the lowercase version "mint" (or "freemint").  Finally
  # the system name "TOS" denotes a system which is actually not
  # MiNT.  But MiNT is downward compatible to TOS, so this should
  # be no problem.
  atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)
    echo m68k-atari-mint${UNAME_RELEASE}
    exit 0 ;;
  atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)
    echo m68k-atari-mint${UNAME_RELEASE}
    exit 0 ;;
  *falcon*:*MiNT:*:* | *falcon*:*mint:*:* | *falcon*:*TOS:*:*)
    echo m68k-atari-mint${UNAME_RELEASE}
    exit 0 ;;
  milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)
    echo m68k-milan-mint${UNAME_RELEASE}
    exit 0 ;;
  hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)
    echo m68k-hades-mint${UNAME_RELEASE}
    exit 0 ;;
  *:*MiNT:*:* | *:*mint:*:* | *:*TOS:*:*)
    echo m68k-unknown-mint${UNAME_RELEASE}
    exit 0 ;;
  m68k:machten:*:*)
    echo m68k-apple-machten${UNAME_RELEASE}
    exit 0 ;;
  powerpc:machten:*:*)
    echo powerpc-apple-machten${UNAME_RELEASE}
    exit 0 ;;
  RISC*:Mach:*:*)
    echo mips-dec-mach_bsd4.3
    exit 0 ;;
  RISC*:ULTRIX:*:*)
    echo mips-dec-ultrix$UNAME_RELEASE
    exit 0 ;;
  VAX*:ULTRIX*:*:*)
    echo vax-dec-ultrix$UNAME_RELEASE
    exit 0 ;;
  2020:CLIX:*:* | 2430:CLIX:*:*)
    echo clipper-intergraph-clix${UNAME_RELEASE}
    exit 0 ;;
  mips:*:*:UMIPS | mips:*:*:RISCos)
    eval $set_cc_for_build
    sed -e 's/^[ 	]*//g' > $dummy.c <<EOF
      #ifdef __cplusplus
      #include <stdio.h>  /* for printf() prototype */
        int main (int argc, char *argv[]) {
      #else
        int main (argc, argv) int argc; char *argv[]; {
      #endif
      #if defined (host_mips) && defined (MIPSEB)
      #if defined (SYSTYPE_SYSV)
        printf ("mips-mips-riscos%ssysv\n", argv[1]); exit (0);
      #endif
      #if defined (SYSTYPE_SVR4)
        printf ("mips-mips-riscos%ssvr4\n", argv[1]); exit (0);
      #endif
      #if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)
        printf ("mips-mips-riscos%sbsd\n", argv[1]); exit (0);
      #endif
      #endif
        exit (-1);
      }
EOF
    $CC_FOR_BUILD -o $dummy $dummy.c \
      && $dummy `echo "$UNAME_RELEASE" \
                  | sed -n 's/\([0-9]*\).*/\1/p'` \
      && exit 0
    echo mips-mips-riscos${UNAME_RELEASE}
    exit 0 ;;
  Motorola:PowerMAX_OS:*:*)
    echo powerpc-motorola-powermax
    exit 0 ;;
  Motorola:*:4.3:PL8-*)
    echo powerpc-harris-powermax
    exit 0 ;;
  Night_Hawk:*:*:PowerMAX_OS | Synergy:PowerMAX_OS:*:*)
    echo powerpc-harris-powermax
    exit 0 ;;
  Night_Hawk:Power_UNIX:*:*)
    echo powerpc-harris-powerunix
    exit 0 ;;
  m88k:CX/UX:7*:*)
    echo m88k-harris-cxux7
    exit 0 ;;
  m88k:*:4*:R4*)
    echo m88k-motorola-sysv4
    exit 0 ;;
  m88k:*:3*:R3*)
    echo m88k-motorola-sysv3
    exit 0 ;;
  AViiON:dgux:*:*)
    # DG/UX returns AViiON for all architectures
    UNAME_PROC=`uname -p`
    if [ $UNAME_PROC = mc88100 ] || [ $UNAME_PROC = mc88110 ]
    then
      if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] \
         || [ ${TARGET_BINARY_INTERFACE}x = x ]
      then echo m88k-dg-dgux${UNAME_RELEASE}
      else echo m88k-dg-dguxbcs${UNAME_RELEASE}
      fi
    else echo i586-dg-dgux${UNAME_RELEASE}
    fi
    exit 0 ;;
  M88*:DolphinOS:*:*) # DolphinOS (SVR3)
    echo m88k-dolphin-sysv3
    exit 0 ;;
  M88*:*:R3*:*)
    # Delta 88k system running SVR3
    echo m88k-motorola-sysv3
    exit 0 ;;
  XD88*:*:*:*) # Tektronix XD88 system running UTekV (SVR3)
    echo m88k-tektronix-sysv3
    exit 0 ;;
  Tek43[0-9][0-9]:UTek:*:*) # Tektronix 4300 system running UTek (BSD)
    echo m68k-tektronix-bsd
    exit 0 ;;
  *:IRIX*:*:*)
    echo mips-sgi-irix`echo $UNAME_RELEASE | sed -e 's/-/_/g'`
    exit 0 ;;
  ????????:AIX?:[12].1:2)
    # AIX 2.2.1 or 2.1.1 is RT/PC AIX.  uname -m gives an 8 hex-code CPU id.
    # Note that "uname -s" prints a trailing space, i.e. "AIX "
    echo romp-ibm-aix
    exit 0 ;;
  i*86:AIX:*:*)
    echo i386-ibm-aix
    exit 0 ;;
  ia64:AIX:*:*)
    if [ -x /usr/bin/oslevel ] ; then
      IBM_REV=`/usr/bin/oslevel`
    else
      IBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}
    fi
    echo ${UNAME_MACHINE}-ibm-aix${IBM_REV}
    exit 0 ;;
  *:AIX:2:3)
    if grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then
      eval $set_cc_for_build
      sed 's/^[ 	]*//' <<EOF >$dummy.c
        #include <sys/systemcfg.h>
        main() {
          if (!__power_pc()) exit(1);
          puts("powerpc-ibm-aix3.2.5");
          exit(0);
        }
EOF
      $CC_FOR_BUILD -o $dummy $dummy.c && $dummy && exit 0
      echo rs6000-ibm-aix3.2.5
    elif grep bos324 /usr/include/stdio.h >/dev/null 2>&1; then
      echo rs6000-ibm-aix3.2.4
    else
      echo rs6000-ibm-aix3.2
    fi
    exit 0 ;;
  *:AIX:*:[45])
    IBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available \
                 | sed -e 's/ .*//' -e 1q`
    if /usr/sbin/lsattr -EHl $IBM_CPU_ID | grep POWER >/dev/null 2>&1
      then IBM_ARCH=rs6000
      else IBM_ARCH=powerpc
    fi
    if [ -x /usr/bin/oslevel ]
      then IBM_REV=`/usr/bin/oslevel | sed -e 's/^\([0-9]*\.[0-9]*\)\..*/\1/'`
      else IBM_REV=4.$UNAME_RELEASE
    fi
    echo ${IBM_ARCH}-ibm-aix$IBM_REV
    exit 0 ;;
  *:AIX:*:*)
    echo rs6000-ibm-aix
    exit 0 ;;
  ibmrt:4.4BSD:*|romp-ibm:BSD:*)
    echo romp-ibm-bsd4.4
    exit 0 ;;
  # Covers RT/PC NetBSD and 4.3 with uname added to report: romp-ibm BSD 4.3
  ibmrt:*BSD:*|romp-ibm:BSD:*)
    echo romp-ibm-bsd${UNAME_RELEASE}
    exit 0 ;;
  *:BOSX:*:*)
    echo rs6000-bull-bosx
    exit 0 ;;
  DPX/2?00:B.O.S.:*:*)
    echo m68k-bull-sysv3
    exit 0 ;;
  9000/[34]??:4.3bsd:1.*:*)
    echo m68k-hp-bsd
    exit 0 ;;
  hp300:4.4BSD:*:* | 9000/[34]??:4.3bsd:2.*:*)
    echo m68k-hp-bsd4.4
    exit 0 ;;
  9000/[34678]??:HP-UX:*:*)
    HPUX_REV=`echo $UNAME_RELEASE \
               | sed -e 's/[^.]*.[0B]*//' \
                     -e 's/\..*//'`
    case $UNAME_MACHINE in
      9000/31? )    HP_ARCH=m68000 ;;
      9000/[34]?? ) HP_ARCH=m68k   ;;
      9000/[678][0-9][0-9] )
        getconf=/usr/bin/getconf
        if [ -x $getconf ]; then
          sc_cpu_version=`$getconf SC_CPU_VERSION 2>/dev/null`
          case $sc_cpu_version in
            524) HP_ARCH=m68k    ;; # CPU_HP_MC68020     (0x20c)
            525) HP_ARCH=m68k    ;; # CPU_HP_MC68030     (0x20d)
            526) HP_ARCH=m68k    ;; # CPU_HP_MC68040     (0x20e)

            523) HP_ARCH=hppa1.0 ;; # CPU_PA_RISC1_0     (0x20b)
            528) HP_ARCH=hppa1.1    # CPU_PA_RISC1_1     (0x210)
              # get more detailed info on 1.1 revision.

              # The 700 and 800 series have no rhyme or reason to which PA
              # version they use.
              model=`echo "$UNAME_MACHINE" | sed -e 's=9000/=='`

              # This file exists in hpux 10.x and 11.x.  Earlier ones?
              for d in /usr/sam/lib/mo /opt/langtools/lib ; do
                if [ -f $d/sched.models ]; then
                  sched="$sched $d/sched.models"
                fi
              done
              if [ -n "$sched" ]; then
                pa=`sed -n -e 's/[	][ 	]*/ /g' \
                           -e "/^$model \([^ ]*\) .*/{s//\1/p;q;}" \
                               $sched`
                test -z "$pa" || HP_ARCH=hppa$pa
              fi
             ;;
            528) HP_ARCH=hppa1.2 ;; # CPU_PA_RISC1_2     (0x211)
            532) HP_ARCH=hppa2.0    # CPU_PA_RISC2_0     (0x214)
              # hpux 10.20 and earlier don't have this variable:
              sc_kernel_bits=`$getconf SC_KERNEL_BITS 2>/dev/null`
              case $sc_kernel_bits in
                32) HP_ARCH=hppa2.0n ;;   # 32-bit "narrow" mode
                64) HP_ARCH=hppa2.0w ;;   # 64-bit "wide" mode
              esac ;;

            # What is this?  Is this an ia64 or something?
            568) HP_ARCH=em1 ;;     # CPU_HP_INTEL_EM_1_0 (0x300)
          esac
        fi
        if [ "" = "$HP_ARCH" ]; then
          eval $set_cc_for_build
          sed 's/^[ 	]*//' <<EOF >$dummy.c
            #define _HPUX_SOURCE
            #include <stdlib.h>
            #include <unistd.h>

            int main () {
            #if defined(_SC_KERNEL_BITS)
              long bits = sysconf(_SC_KERNEL_BITS);
            #endif
              long cpu  = sysconf (_SC_CPU_VERSION);

              switch (cpu) {
                case CPU_PA_RISC1_0: puts ("hppa1.0"); break;
                case CPU_PA_RISC1_1: puts ("hppa1.1"); break;
                case CPU_PA_RISC2_0:
            #if defined(_SC_KERNEL_BITS)
                  switch (bits) {
                    case 64: puts ("hppa2.0w"); break;
                    case 32: puts ("hppa2.0n"); break;
                    default: puts ("hppa2.0");  break;
                  } break;
            #else  /* !defined(_SC_KERNEL_BITS) */
                  puts ("hppa2.0"); break;
            #endif
                default: puts ("hppa1.0"); break;
              }
              exit (0);
            }
EOF
        (CCOPTS= $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`
        test -z "$HP_ARCH" && HP_ARCH=hppa
        fi ;;
    esac

    echo ${HP_ARCH}-hp-hpux$HPUX_REV
    exit 0 ;;
  ia64:HP-UX:*:*)
    HPUX_REV=`echo $UNAME_RELEASE | sed -e 's/[^.]*.[0B]*//'`
    echo ia64-hp-hpux$HPUX_REV
    exit 0 ;;
  3050*:HI-UX:*:*)
    eval $set_cc_for_build
    sed 's/^[ 	]*//' <<EOF >$dummy.c
      #include <unistd.h>
      int main () {
        long cpu = sysconf (_SC_CPU_VERSION);
        /* The order matters, because CPU_IS_HP_MC68K erroneously
         * returns true for CPU_PA_RISC1_0.  CPU_IS_PA_RISC returns
         * correct results, however.
         */
        if (CPU_IS_PA_RISC (cpu)) {
          switch (cpu) {
            case CPU_PA_RISC1_0: puts ("hppa1.0-hitachi-hiuxwe2"); break;
            case CPU_PA_RISC1_1: puts ("hppa1.1-hitachi-hiuxwe2"); break;
            case CPU_PA_RISC2_0: puts ("hppa2.0-hitachi-hiuxwe2"); break;
            default: puts ("hppa-hitachi-hiuxwe2"); break;
          }
        } else if (CPU_IS_HP_MC68K (cpu))
                 puts ("m68k-hitachi-hiuxwe2");
               else
                 puts ("unknown-hitachi-hiuxwe2");
        exit (0);
      }
EOF
    $CC_FOR_BUILD -o $dummy $dummy.c && $dummy && exit 0
    echo unknown-hitachi-hiuxwe2
    exit 0 ;;
  9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )
      echo hppa1.1-hp-bsd
      exit 0 ;;
  9000/[78]??:4.3bsd:*:* )    # TODO: need to handle the arch for
    echo hppa1.0-hp-bsd       # these other HP systems more accurately.
    exit 0 ;;
  *9??*:MPE/iX:*:* | *3000*:MPE/iX:*:* )
    echo hppa1.0-hp-mpeix
    exit 0 ;;
  hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )
    echo hppa1.1-hp-osf
    exit 0 ;;
  hp8??:OSF1:*:*)
    echo hppa1.0-hp-osf
    exit 0 ;;
  i*86:OSF1:*:*)
    if [ -x /usr/sbin/sysversion ] ; then
      echo ${UNAME_MACHINE}-unknown-osf1mk
    else
      echo ${UNAME_MACHINE}-unknown-osf1
    fi
    exit 0 ;;
  C1*:ConvexOS:*:* | convex:ConvexOS:C1*:*)
    echo c1-convex-bsd
    exit 0 ;;
  C2*:ConvexOS:*:* | convex:ConvexOS:C2*:*)
    if getsysinfo -f scalar_acc
    then echo c32-convex-bsd
    else echo c2-convex-bsd
    fi
    exit 0 ;;
  C34*:ConvexOS:*:* | convex:ConvexOS:C34*:*)
    echo c34-convex-bsd
    exit 0 ;;
  C38*:ConvexOS:*:* | convex:ConvexOS:C38*:*)
    echo c38-convex-bsd
    exit 0 ;;
  C4*:ConvexOS:*:* | convex:ConvexOS:C4*:*)
    echo c4-convex-bsd
    exit 0 ;;
  CRAY*X-MP:*:*:*)
    echo xmp-cray-unicos
    exit 0 ;;
  CRAY*Y-MP:*:*:*)
    echo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
    exit 0 ;;
  CRAY*[A-Z]90:*:*:*)
    echo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \
      | sed -e 's/CRAY.*\([A-Z]90\)/\1/' \
            -e "$sed_downcase" \
            -e 's/\.[^.]*$/.X/'
    exit 0 ;;
  CRAY*TS:*:*:*)
    echo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
    exit 0 ;;
  CRAY*T3E:*:*:*)
    echo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
    exit 0 ;;
  CRAY*SV1:*:*:*)
    echo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
    exit 0 ;;
  *:UNICOS/mp:*:*)
    echo nv1-cray-unicosmp${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
    exit 0 ;;
  F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:* | 5000:UNIX_System_V:*:*)
    F_PROC=`uname -m | sed -e "$sed_downcase"`
    F_SYS=`uname  -p | sed -e "$sed_downcase" -e 's/\///'`
    F_REL=`echo $UNAME_RELEASE | sed -e 's/ /_/g'`
    echo ${F_PROC}-fujitsu-${F_SYS}${F_REL}
    exit 0 ;;
  i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\ Embedded/OS:*:*)
    echo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}
    exit 0 ;;
  *:BSD/OS:*:*)
    case $UNAME_MACHINE in
      sparc* ) UNAME_MACHINE=sparc ;;
    esac
    echo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}
    exit 0 ;;
  i*:CYGWIN*:* | x86_64:CYGWIN*:* )
    echo ${UNAME_MACHINE}-pc-cygwin
    exit 0 ;;
  i*:MINGW*:*)
    echo ${UNAME_MACHINE}-pc-mingw32
    exit 0 ;;
  i*:PW*:*)
    echo ${UNAME_MACHINE}-pc-pw32
    exit 0 ;;
  x86:Interix*:[34]*)
    echo i586-pc-interix${UNAME_RELEASE} | sed -e 's/\..*//'
    exit 0 ;;
  [345]86:Windows_95:* | [345]86:Windows_98:* | [345]86:Windows_NT:*)
    echo i${UNAME_MACHINE}-pc-mks
    exit 0 ;;
  i*:Windows_NT*:* | Pentium*:Windows_NT*:*)
    # How do we know it's Interix rather than the generic POSIX subsystem?
    # It also conflicts with pre-2.0 versions of AT&T UWIN. Should we
    # UNAME_MACHINE based on the output of uname instead of i386?
    echo x86-pc-interix
    exit 0 ;;
  i*:UWIN*:*)
    echo ${UNAME_MACHINE}-pc-uwin
    exit 0 ;;
  p*:CYGWIN*:*)
    echo powerpcle-unknown-cygwin
    exit 0 ;;
  prep*:SunOS:5.*:*)
    echo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
    exit 0 ;;
  *:GNU:*:*) # the GNU system
    machine=`echo $UNAME_MACHINE | sed -e 's,/[-/].*$,,'`
    release=`echo $UNAME_RELEASE | sed -e 's,/-.*$,,'`
    echo ${machine}-unknown-gnu$release
    exit 0 ;;
  *:GNU/*:*:*) # other systems with GNU libc and userland
    system=`echo $UNAME_SYSTEM | sed -e 's,^[^/]*/,,' -e "$sed_downcase"`
    release=`echo $UNAME_RELEASE | sed -e 's/[-(].*//'`
    echo ${UNAME_MACHINE}-unknown-${system}${release}-gnu
    exit 0 ;;
  i*86:Minix:*:*)
    echo ${UNAME_MACHINE}-pc-minix
    exit 0 ;;
  i*86:DYNIX/ptx:4*:*)
    # ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.
    # Earlier versions are messed up and put the nodename in both
    # sysname and nodename.
    echo ${UNAME_MACHINE}-sequent-sysv4
    exit 0 ;;
  i*86:UNIX_SV:4.2MP:2.*)
    # Unixware is an offshoot of SVR4, but it has its own version
    # number series starting with 2...
    # I am not positive that other SVR4 systems won't match this,
    # I just have to hope.  -- rms.
    # Use sysv4.2uw... so that sysv4* matches it.
    echo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}
    exit 0 ;;
  i*86:OS/2:*:*)
    # If we were able to find `uname', then EMX Unix compatibility
    # is probably installed.
    echo ${UNAME_MACHINE}-pc-os2-emx
    exit 0 ;;
  i*86:XTS-300:*:STOP)
    echo ${UNAME_MACHINE}-unknown-stop
    exit 0 ;;
  i*86:atheos:*:*)
    echo ${UNAME_MACHINE}-unknown-atheos
    exit 0 ;;
  i*86:syllable:*:*)
    echo ${UNAME_MACHINE}-pc-syllable
    exit 0 ;;
  i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.0*:*)
    echo i386-unknown-lynxos${UNAME_RELEASE}
    exit 0 ;;
  i*86:*DOS:*:*)
    echo ${UNAME_MACHINE}-pc-msdosdjgpp
    exit 0 ;;
  i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)
    UNAME_REL=`echo ${UNAME_RELEASE} | sed -e 's/\/MP$//'`
    if grep Novell /usr/include/link.h >/dev/null 2>/dev/null
      then echo $UNAME_MACHINE-univel-sysv$UNAME_REL
      else echo $UNAME_MACHINE-pc-sysv$UNAME_REL
    fi
    exit 0 ;;
  i?86:*:5*:* | i?86:SYSTEM_V:5*:*)   # SysVr5/Unixware7
    if uname -a | grep SCO >/dev/null 2>&1 ; then
      (uname -s|egrep UnixWare >/dev/null) && UNAME_VER=uw${UNAME_VERSION}
      if uname -X 2>/dev/null >/dev/null ; then
        (uname -X|egrep i80486 >/dev/null) && UNAME_MACHINE=i486
        (uname -X|egrep '^Machine.*Pentium' >/dev/null) && UNAME_MACHINE=i586
      fi
      echo ${UNAME_MACHINE}-sco-sysv${UNAME_RELEASE}-${UNAME_VER}
    else
      echo ${UNAME_MACHINE}-pc-sysv${UNAME_RELEASE}
    fi
    exit 0 ;;
  i?86:*:5:7*)
    UNAME_REL=`(uname -X|egrep Release|sed -e 's/.*= //')`
    UNAME_MACHINE=`uname -X | sed -ne '
        /^Machine.*Pentium Pro/{s/.*/i686/p;q;}
        /^Machine.*Pent.*II/{s/.*/i686/p;q;}
        /^Machine.*Pentium/{s/.*/i586/p;q;}
        /i80486/{s/.*/i486/p;q;}'`
    echo ${UNAME_MACHINE}-${UNAME_SYSTEM}${UNAME_VERSION}-sysv${UNAME_REL}
    exit 0 ;;
  i?86:*:3.2:*)
    if test -f /usr/options/cb.name; then
      UNAME_REL=`sed -ne 's/.*Version //p' </usr/options/cb.name`
      echo ${UNAME_MACHINE}-pc-isc$UNAME_REL
    elif uname -X 2>/dev/null >/dev/null ; then
      UNAME_REL=`(uname -X|egrep Release|sed -e 's/.*= //')`
      UNAME_MACHINE=`uname -X | sed -ne '
          /^Machine.*Pentium Pro/{s/.*/i686/p;q;}
          /^Machine.*Pent.*II/{s/.*/i686/p;q;}
          /^Machine.*Pentium/{s/.*/i586/p;q;}
          /i80486/{s/.*/i486/p;q;}'`
      echo $UNAME_MACHINE-pc-sco$UNAME_REL
    else
      echo $UNAME_MACHINE-pc-sysv3.2
    fi
    exit 0 ;;
  paragon:*:*:*)
    echo i860-intel-osf1
    exit 0 ;;
  pc:*:*:*)
    # uname -m prints for DJGPP always 'pc', but it prints nothing about
    # the processor, so we play safe by assuming i386.
    echo i386-pc-msdosdjgpp
    exit 0 ;;
  Intel:Mach:3*:*)
    echo i386-pc-mach3
    exit 0 ;;
  i860:*:4.*:*) # i860-SVR4
    if grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then
      echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4
    else # Add other i860-SVR4 vendors below as they are discovered.
      echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4
    fi
    exit 0 ;;
  mini*:CTIX:SYS*5:*)
    # "miniframe"
    echo m68010-convergent-sysv
    exit 0 ;;
  mc68k:UNIX:SYSTEM5:3.51m)
    echo m68k-convergent-sysv
    exit 0 ;;
  M680?0:D-NIX:5.3:*)
    echo m68k-diab-dnix
    exit 0 ;;
  [Mm]68*:*:R3V[567]*:* )
    test -r /sysV68 && echo 'm68k-motorola-sysv' && exit 0 ;;
  3[345]??:*:4.0:3.0 | 3[34]??A:*:4.0:3.0 | 3[34]??,*:*:4.0:3.0 | 3[34]??/*:*:4.0:3.0 | \
  4400:*:4.0:3.0 | 4850:*:4.0:3.0 | SKA40:*:4.0:3.0 | SDS2:*:4.0:3.0 | SHG2:*:4.0:3.0 )
    OS_REL=
    if test -r /etc/.relid ; then
      OS_REL=.`sed -n -e 's/[^ ]* [^ ]* \([0-9][0-9]\).*/\1/p' /etc/.relid`
    fi
    proc=`uname -p 2>/dev/null`
    case $proc in
      *86* )     echo i486-ncr-sysv4.3${OS_REL} && exit 0 ;;
      *entium* ) echo i586-ncr-sysv4.3${OS_REL} && exit 0 ;;
    esac ;;
  3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)
      uname -p 2>/dev/null | grep 86 >/dev/null \
        && echo i486-ncr-sysv4 && exit 0 ;;
  m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:* )
	echo m68k-unknown-lynxos${UNAME_RELEASE}
        exit 0 ;;
  mc68030:UNIX_System_V:4.*:*)
        echo m68k-atari-sysv4
        exit 0 ;;
  i?86:LynxOS:2.*:* | i?86:LynxOS:3.[01]*:*)
	echo ${UNAME_MACHINE}-unknown-lynxos${UNAME_RELEASE}
        exit 0 ;;
  TSUNAMI:LynxOS:2.*:*)
        echo sparc-unknown-lynxos$UNAME_RELEASE
        exit 0 ;;
  rs6000:LynxOS:2.*:* )
	echo rs6000-unknown-lynxos${UNAME_RELEASE}
        exit 0 ;;
  PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.0*:*)
    echo powerpc-unknown-lynxos${UNAME_RELEASE}
    exit 0 ;;
  SM[BE]S:UNIX_SV:*:*)
	echo mips-dde-sysv${UNAME_RELEASE}
	exit 0 ;;
  RM*:ReliantUNIX-*:*:*)
    echo mips-sni-sysv4
    exit 0 ;;
  RM*:SINIX-*:*:*)
    echo mips-sni-sysv4
    exit 0 ;;
  *:SINIX-*:*:*)
    if uname -p >/dev/null 2>&1; then
      UNAME_MACHINE=`(uname -p) 2>/dev/null`
      echo ${UNAME_MACHINE}-sni-sysv4
    else
      echo ns32k-sni-sysv
    fi
    exit 0 ;;
  PENTIUM:*:4.0*:*)
    # Unisys `ClearPath HMP IX 4000' SVR4/MP effort
    # says <Richard.M.Bartel@ccMail.Census.GOV>
    echo i586-unisys-sysv4
    exit 0 ;;
  *:UNIX_System_V:4*:FTX*)
	# From Gerald Hewes <hewes@openmarket.com>.
	# How about differentiating between stratus architectures? -djm
	echo hppa1.1-stratus-sysv4
	exit 0 ;;
  *:*:*:FTX*)
	# From seanf@swdc.stratus.com.
	echo i860-stratus-sysv4
        exit 0 ;;
  *:VOS:*:*)
	# From Paul.Green@stratus.com.
	echo hppa1.1-stratus-vos
	exit 0 ;;
  mc68*:A/UX:*:*)
	echo m68k-apple-aux${UNAME_RELEASE}
	exit 0 ;;
  news*:NEWS-OS:6*:*)
	echo mips-sony-newsos6
	exit 0 ;;
  R[34]000:*System_V*:*:* | R[34]000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:* )
	if [ -d /usr/nec ]; then
	  echo mips-nec-sysv${UNAME_RELEASE}
	else
	  echo mips-unknown-sysv${UNAME_RELEASE}
	fi
        exit 0 ;;
  BeBox:BeOS:*:*)	# BeOS running on hardware made by Be, PPC only.
    echo powerpc-be-beos
    exit 0 ;;
  BeMac:BeOS:*:*)	# BeOS running on Mac or Mac clone, PPC only.
    echo powerpc-apple-beos
    exit 0 ;;
  BePC:BeOS:*:*)	# BeOS running on Intel PC compatible.
    echo x86-pc-beos
    exit 0 ;;
  SX-4:SUPER-UX:*:*)
    echo sx4-nec-superux${UNAME_RELEASE}
    exit 0 ;;
  SX-5:SUPER-UX:*:*)
    echo sx5-nec-superux${UNAME_RELEASE}
    exit 0 ;;
  SX-6:SUPER-UX:*:*)
    echo sx6-nec-superux${UNAME_RELEASE}
    exit 0 ;;
  Power*:Rhapsody:*:*)
    echo powerpc-apple-rhapsody${UNAME_RELEASE}
    exit 0 ;;
  *:Rhapsody:*:*)
    echo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}
    exit 0 ;;
  *:procnto*:*:* | *:QNX:[0123456789]*:*)
    UNAME_PROCESSOR=`uname -p`
    if test "$UNAME_PROCESSOR" = x86; then
      UNAME_MACHINE=pc
    fi
    echo ${UNAME_PROCESSOR}-${UNAME_MACHINE}-nto-qnx${UNAME_RELEASE}
    exit 0 ;;
  *:QNX:*:4*)
    echo x86-pc-qnx
    exit 0 ;;
  NSR-?:NONSTOP_KERNEL:*:*)
    echo nsr-tandem-nsk${UNAME_RELEASE}
    exit 0 ;;
  *:NonStop-UX:*:*)
    echo mips-compaq-nonstopux
    exit 0 ;;
  BS2000:POSIX*:*:*)
    echo bs2000-siemens-sysv
    exit 0 ;;
  DS/*:UNIX_System_V:*:*)
    echo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}
    exit 0 ;;
  *:Plan9:*:*)
    # "uname -m" is not consistent, so use $cputype instead. 386 is
    # converted to x86 for consistency with other x86 operating systems.
    if test "$cputype" = 386; then
      UNAME_MACHINE=x86
    else
      UNAME_MACHINE=$cputype
    fi
    echo ${UNAME_MACHINE}-unknown-plan9
    exit 0 ;;
  *:TOPS-10:*:*)
    echo pdp10-unknown-tops10
    exit 0 ;;
  *:TENEX:*:*)
    echo pdp10-unknown-tenex
    exit 0 ;;
  KS10:TOPS-20:*:* | KL10:TOPS-20:*:* | TYPE4:TOPS-20:*:*)
    echo pdp10-dec-tops20
    exit 0 ;;
  XKL-1:TOPS-20:*:* | TYPE5:TOPS-20:*:*)
    echo pdp10-xkl-tops20
    exit 0 ;;
  *:TOPS-20:*:*)
    echo pdp10-unknown-tops20
    exit 0 ;;
  *:ITS:*:*)
    echo pdp10-unknown-its
    exit 0 ;;
  SEI:*:*:SEIUX)
    echo mips-sei-seiux${UNAME_RELEASE}
    exit 0 ;;
  *:DragonFly:*:*)
    rel=`echo $UNAME_RELEASE | sed -e 's/[-(].*//'`
    echo ${UNAME_MACHINE}-unknown-dragonfly$rel
    exit 0 ;;
  PENTIUM:CPunix:4.0*:*)
    # Unisys `ClearPath HMP IX 4000' SVR4/MP effort
    # says <Richard.M.Bartel@ccMail.Census.GOV>
    echo i586-unisys-sysv4
    exit 0 ;;
esac

# ----------------------------------------------------------------------
# Desperate searching

# Apollos put the system type in the environment.
if test -d /usr/apollo ; then
   echo $ISP-apollo-$SYSTYPE
   exit 0
fi

# Convex versions that predate uname can use getsysinfo(1)
if test -f /usr/convex/getsysinfo; then
  case `getsysinfo -f cpu_type` in
    c1*) echo c1-convex-bsd; exit 0 ;;
    c2*) if getsysinfo -f scalar_acc
         then echo c32-convex-bsd ; exit 0
         else echo c2-convex-bsd  ; exit 0
         fi ;;
    c34*) echo c34-convex-bsd ; exit 0 ;;
    c38*) echo c38-convex-bsd ; exit 0 ;;
    c4*)  echo c4-convex-bsd  ; exit 0 ;;
  esac
fi

# Try some other programs.  These should echo the name of the machine type
# on stdout.
progs="
   /bin/arch
   /bin/mach
   /bin/machine
   /usr/local/bin/machine
"
machtype=

for prog in $progs ; do
   # Should really be -x, but some old versions of test are broken
   if test -f $prog ; then
      machtype=`$prog 2> /dev/null`
      break
   fi
done

if test -z "$machtype"; then
   # These programs just exit with a zero exit status if they are for the
   # correct machine type.  They return false otherwise.  Add programs as
   # necessary.
   #
   #  Be sure to list most specific types first.  For example, on a Sun,
   # /bin/sun will return 0 even though that's not very specific.  Try `sun3',
   # `sun4', etc. first before trying `sun'.
   commands='
      /bin/hp9000s*
      /bin/vax
      /bin/sun4c
      /bin/sun4
      /bin/sun3x
      /bin/sun3
      /bin/sun2
      /bin/sun386
      /bin/i386
      /bin/iAPX286
   '
   machtype=

   for cmd in $commands ; do
      if test -f "$cmd" && "$cmd" ; then
         machtype=`basename $cmd`
         break
      fi
   done
fi

case $machtype in
   iAPX286 )
      echo iAPX286-sun-sunos
      exit 0 ;;
   ibmrt )
      echo romp-ibm-aos
      exit 0 ;;
   hp9000s3?? | hp3?? )
      if test -f /vmunix ; then echo m68k-hp-bsd;  exit 0; fi
      if test -f /hp-ux ;  then echo m68k-hp-hpux; exit 0; fi
      echo m68k-hp-unknown
      exit 0 ;;
   hp9000s7?? | hp7?? )
      if test -f /vmunix ; then echo hppa1.1-hp-bsd;  exit 0; fi
      if test -f /hp-ux ;  then echo hppa1.1-hp-hpux; exit 0; fi
      echo hppa1.0-hp-unknown
      exit 0 ;;
   hp9000s8?? | hp8?? )
      if test -f /vmunix ; then echo hppa1.0-hp-bsd;  exit 0; fi
      if test -f /hp-ux ;  then echo hppa1.0-hp-hpux; exit 0; fi
      echo hppa1.0-hp-unknown
      exit 0 ;;
   news* )
      version="`strings /vmunix \
           | sed -n -e '/^NEWS-OS R/{s/^[^ ]* [^ ]* \([^ ]*\) .*/\1/p;q;}'`"
      echo m68k-sony-newsos$version
      exit 0 ;;
   sparc | sun4* )
      version="`strings /vmunix \
           | sed -n -e '/^SunOS R/{s/^SunOS [^ ]* \([^ ]*\) .*/\1/p;q;}
                        /^Sun UNIX/{s/.*Release \([^ ]*\) .*/\1/p;q;}'`"
      echo sparc-sun-sunos$version
      exit 0 ;;
   sun386 )
      echo i386-sun-sunos
      exit 0 ;;
   sun2 | sun3* )
      version="`strings /vmunix \
           | sed -n -e '/^SunOS R/{s/^SunOS [^ ]* \([^ ]*\) .*/\1/p;q;}
                        /^Sun UNIX/{s/.*Release \([^ ]*\) .*/\1/p;q;}'`"
      echo m68k-sun-sunos$version
      exit 0 ;;
   vax )
      version="`strings /vmunix \
           | sed -n -e '/^ULTRIX V[0-9]/{s/^ULTRIX V\([^ ]*\) .*/ultrix\1/p;q;}' \
                    -e '/^\([0-9.]*\) BSD .*/{s//bsd\1/p;q;}'`"
             # Not sure it's worth differentiating this case
             #      -e '/^\([0-9.]*\) BSD Quasijarus .*/{s//bsd\1.q/p;q;}' \
      case $version in
        '' ) : ;;
	* ) echo vax-dec-$version
            exit 0 ;;
      esac ;;
esac

# ----------------------------------------------------------------------
# Last ditch effort: compile a program.

eval $set_cc_for_build

cat >$dummy.c <<EOF
#ifdef _SEQUENT_
# include <sys/types.h>
# include <sys/utsname.h>
#endif
main ()
{
#if defined (sony)
#if defined (MIPSEB)
  /* BFD wants "bsd" instead of "newsos".  Perhaps BFD should be changed,
     I don't know....  */
  printf ("mips-sony-bsd\n"); exit (0);
#else
#include <sys/param.h>
  printf ("m68k-sony-newsos%s\n",
#ifdef NEWSOS4
          "4"
#else
	  ""
#endif
         ); exit (0);
#endif
#endif

#if defined (__arm) && defined (__acorn) && defined (__unix)
  printf ("arm-acorn-riscix"); exit (0);
#endif

#if defined (hp300) && !defined (hpux)
  printf ("m68k-hp-bsd\n"); exit (0);
#endif

#if defined (NeXT)
#if !defined (__ARCHITECTURE__)
#define __ARCHITECTURE__ "m68k"
#endif
  int version;
  version=`(hostinfo | sed -n 's/.*NeXT Mach \([0-9]*\).*/\1/p') 2>/dev/null`;
  if (version < 4)
    printf ("%s-next-nextstep%d\n", __ARCHITECTURE__, version);
  else
    printf ("%s-next-openstep%d\n", __ARCHITECTURE__, version);
  exit (0);
#endif

#if defined (MULTIMAX) || defined (n16)
#if defined (UMAXV)
  printf ("ns32k-encore-sysv\n"); exit (0);
#else
#if defined (CMU)
  printf ("ns32k-encore-mach\n"); exit (0);
#else
  printf ("ns32k-encore-bsd\n"); exit (0);
#endif
#endif
#endif

#if defined (__386BSD__)
  printf ("i386-pc-bsd\n"); exit (0);
#endif

#if defined (sequent)
#if defined (i386)
  printf ("i386-sequent-dynix\n"); exit (0);
#endif
#if defined (ns32000)
  printf ("ns32k-sequent-dynix\n"); exit (0);
#endif
#endif

#if defined (_SEQUENT_)
    struct utsname un;

    uname(&un);

    if (strncmp(un.version, "V2", 2) == 0) {
	printf ("i386-sequent-ptx2\n"); exit (0);
    }
    if (strncmp(un.version, "V1", 2) == 0) { /* XXX is V1 correct? */
	printf ("i386-sequent-ptx1\n"); exit (0);
    }
    printf ("i386-sequent-ptx\n"); exit (0);

#endif

#if defined (vax)
# if !defined (ultrix)
#  include <sys/param.h>
#  if defined (BSD)
#   if BSD == 43
      printf ("vax-dec-bsd4.3\n"); exit (0);
#   else
#    if BSD == 199006
      printf ("vax-dec-bsd4.3reno\n"); exit (0);
#    else
      printf ("vax-dec-bsd\n"); exit (0);
#    endif
#   endif
#  else
    printf ("vax-dec-bsd\n"); exit (0);
#  endif
# else
    printf ("vax-dec-ultrix\n"); exit (0);
# endif
#endif

#if defined (alliant) && defined (i860)
  printf ("i860-alliant-bsd\n"); exit (0);
#endif

  exit (1);
}
EOF

$CC_FOR_BUILD $dummy.c -o $dummy 2> /dev/null && $dummy && exit 0

echo "unknown"
exit 1

# hosttype ends here
